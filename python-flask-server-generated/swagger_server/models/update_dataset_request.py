# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UpdateDatasetRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, description: str=None, permission: str=None, language: str=None, chunk_method: str=None, embedding_model_id: str=None, photo: str=None, layout_recognize: bool=None, token_num: int=None):  # noqa: E501
        """UpdateDatasetRequest - a model defined in Swagger

        :param name: The name of this UpdateDatasetRequest.  # noqa: E501
        :type name: str
        :param description: The description of this UpdateDatasetRequest.  # noqa: E501
        :type description: str
        :param permission: The permission of this UpdateDatasetRequest.  # noqa: E501
        :type permission: str
        :param language: The language of this UpdateDatasetRequest.  # noqa: E501
        :type language: str
        :param chunk_method: The chunk_method of this UpdateDatasetRequest.  # noqa: E501
        :type chunk_method: str
        :param embedding_model_id: The embedding_model_id of this UpdateDatasetRequest.  # noqa: E501
        :type embedding_model_id: str
        :param photo: The photo of this UpdateDatasetRequest.  # noqa: E501
        :type photo: str
        :param layout_recognize: The layout_recognize of this UpdateDatasetRequest.  # noqa: E501
        :type layout_recognize: bool
        :param token_num: The token_num of this UpdateDatasetRequest.  # noqa: E501
        :type token_num: int
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'permission': str,
            'language': str,
            'chunk_method': str,
            'embedding_model_id': str,
            'photo': str,
            'layout_recognize': bool,
            'token_num': int
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'permission': 'permission',
            'language': 'language',
            'chunk_method': 'chunk_method',
            'embedding_model_id': 'embedding_model_id',
            'photo': 'photo',
            'layout_recognize': 'layout_recognize',
            'token_num': 'token_num'
        }
        self._name = name
        self._description = description
        self._permission = permission
        self._language = language
        self._chunk_method = chunk_method
        self._embedding_model_id = embedding_model_id
        self._photo = photo
        self._layout_recognize = layout_recognize
        self._token_num = token_num

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateDatasetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateDatasetRequest of this UpdateDatasetRequest.  # noqa: E501
        :rtype: UpdateDatasetRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this UpdateDatasetRequest.


        :return: The name of this UpdateDatasetRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this UpdateDatasetRequest.


        :param name: The name of this UpdateDatasetRequest.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this UpdateDatasetRequest.


        :return: The description of this UpdateDatasetRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this UpdateDatasetRequest.


        :param description: The description of this UpdateDatasetRequest.
        :type description: str
        """

        self._description = description

    @property
    def permission(self) -> str:
        """Gets the permission of this UpdateDatasetRequest.


        :return: The permission of this UpdateDatasetRequest.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission: str):
        """Sets the permission of this UpdateDatasetRequest.


        :param permission: The permission of this UpdateDatasetRequest.
        :type permission: str
        """

        self._permission = permission

    @property
    def language(self) -> str:
        """Gets the language of this UpdateDatasetRequest.


        :return: The language of this UpdateDatasetRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this UpdateDatasetRequest.


        :param language: The language of this UpdateDatasetRequest.
        :type language: str
        """

        self._language = language

    @property
    def chunk_method(self) -> str:
        """Gets the chunk_method of this UpdateDatasetRequest.


        :return: The chunk_method of this UpdateDatasetRequest.
        :rtype: str
        """
        return self._chunk_method

    @chunk_method.setter
    def chunk_method(self, chunk_method: str):
        """Sets the chunk_method of this UpdateDatasetRequest.


        :param chunk_method: The chunk_method of this UpdateDatasetRequest.
        :type chunk_method: str
        """

        self._chunk_method = chunk_method

    @property
    def embedding_model_id(self) -> str:
        """Gets the embedding_model_id of this UpdateDatasetRequest.


        :return: The embedding_model_id of this UpdateDatasetRequest.
        :rtype: str
        """
        return self._embedding_model_id

    @embedding_model_id.setter
    def embedding_model_id(self, embedding_model_id: str):
        """Sets the embedding_model_id of this UpdateDatasetRequest.


        :param embedding_model_id: The embedding_model_id of this UpdateDatasetRequest.
        :type embedding_model_id: str
        """

        self._embedding_model_id = embedding_model_id

    @property
    def photo(self) -> str:
        """Gets the photo of this UpdateDatasetRequest.


        :return: The photo of this UpdateDatasetRequest.
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo: str):
        """Sets the photo of this UpdateDatasetRequest.


        :param photo: The photo of this UpdateDatasetRequest.
        :type photo: str
        """

        self._photo = photo

    @property
    def layout_recognize(self) -> bool:
        """Gets the layout_recognize of this UpdateDatasetRequest.


        :return: The layout_recognize of this UpdateDatasetRequest.
        :rtype: bool
        """
        return self._layout_recognize

    @layout_recognize.setter
    def layout_recognize(self, layout_recognize: bool):
        """Sets the layout_recognize of this UpdateDatasetRequest.


        :param layout_recognize: The layout_recognize of this UpdateDatasetRequest.
        :type layout_recognize: bool
        """

        self._layout_recognize = layout_recognize

    @property
    def token_num(self) -> int:
        """Gets the token_num of this UpdateDatasetRequest.


        :return: The token_num of this UpdateDatasetRequest.
        :rtype: int
        """
        return self._token_num

    @token_num.setter
    def token_num(self, token_num: int):
        """Sets the token_num of this UpdateDatasetRequest.


        :param token_num: The token_num of this UpdateDatasetRequest.
        :type token_num: int
        """

        self._token_num = token_num
